key=value
host="jmatrix.net"
# this is a comment.
# and another comment...

system=[method://java.lang.System.getProperties()]

host.string="The host is ${host}"

# The property below contains an invalid substituion.
# this should generate a warning on load.
bad.sub=This is a ${baaaad.substitution}

empty.string=""

string.with.quoted.values="And gosling said, \"let there be escaped quoted literals.\" and there were"

env=dev

ds=[env/${env}.properties]

multi.line.quoted.string=" This is a 
multi-line quoted string"


# Separate STRING into KEY_STRING and VALUE_STRING,
# Where KEY_STRING is a bit more restricted.  Value string 
# should be allowed to include virtually anything that is not a 
# token.  (this is would include things like (), {}, but they would
# be allowed in QUOTED_STRING, so this is not much of a limitation.
# Also, add a production for raw [include] and value [include]. 
# At that point, the Lexer/Parser should be complete.
#foo.include=[http://jmatrix.net/test.properties]
#[file:/local.properties]
# Test that we can do relative file URLs, relative to local file.

# I'll need to support further comment styles, and depending on how badly
# I want it, I'll also need to support line extensions with "\", both 
# = and :, and a greatly expanded charset for values (including {}, /, ., etc)
# All this is to support legacy property files.  Which would be important
# for publication on java.net, but not so much for my stuff...

list=("one", "two", "three", "four", 
      "get your bootie on the floor")

included.nested.props=[included.properties]

remote.include=[http://jmatrix.net/properties/test.properties]

nested= {
	# This is a complicated () [] { foo} nested comment.
	foo="bar # comment string."
	foo.nest={
		this="is double nested!"
		foo.url="http://${host}"
		text="This is the host string '${host.string}'"
		text.1="Home Folder is ${system->user.home}"
	}
}
