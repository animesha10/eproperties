###########################################################################
# Properties file to start the 'core' JINI services. These services
# are central to the JINI architecture - but are independent of 
# and client code that may be running on the JINI platform.
#
# These JINI services should be viewed as network infrastructure - 
# similar to DNS or SMTP type servers.  They must exist in the 
# network for the application to function, however they do not
# need to be deployed with the application itself.
#
# Paul Bemowski, 14 Jan 2009
###########################################################################

# The syntax below incorporates the JAVA system properties here.
system=[method://java.lang.System.getProperties()]
current.env=${system->ibill.env|dev}

env={
	dev={
		public.host="flask.jmatrix.net"
	}
	prod={
		public.host="sailor.jmatrix.net"
	}
}

# This is the 'public' DNS style name that other boxes use to connect
# to these services on TCP/IP.
public.host=${env->${current.env}->public.host}
http.port=38081

# The is the URL used to publish RMI Codebase URLs.
class.server.url="http://${public.host}:${http.port}"

jsk.dl.jar="${class.server.url}/jsk-dl.jar"

# This is an open security policy.
all.policy.path="../config/jsk-all.policy"

app.root="${system->user.dir}/../"

# This is the JINI Group.  We want all services to be a member
# of the default group.
group="JINI_ROOT"

log=[log.properties]

services={
	# Http class server
	class.server={
		class="jini.server.wrapper.ClassServerWrapper"
		
		port="${http.port}"
		dir.list="${app.root}/jars/jini/lib-dl:${app.root}/config"
		trees="true"
		verbose="true"
	}
	
	# Reggie (Lookup Discovery)
	# This helped: 
	# http://osdir.com/ml/java.sun.javaspaces/2004-01/msg00012.html
	reggie={
		class="jini.server.wrapper.ReggieWrapper"
		
		impl.class="com.sun.jini.reggie.TransientRegistrarImpl"
		
		policy="${all.policy.path}"
		
		groups=("JINI_ROOT")
		import.codebase="${app.root}/jars/jini/lib/reggie.jar"
		
		# Space separated export classpath
		export.codebase="${class.server.url}/reggie-dl.jar ${jsk.dl.jar}"
		
		# These are config args going to reggie.  The first "-" tells
		# the config system in JINI to read from the string (I think).  But 
		# it does work.
		config.args=("-", "com.sun.jini.reggie.initialMemberGroups=new String[]{\"${group}\"}")
	}
	
	# Mahalo (TransactionManager) 
	mahalo={
		class="jini.server.wrapper.MahaloWrapper"
		
		impl.class="com.sun.jini.mahalo.TransientMahaloImpl"
		
		policy="${all.policy.path}"
		
		groups=("JINI_ROOT")
		import.codebase="${app.root}/jars/jini/lib/mahalo.jar"
		
		# Space separated export classpath
		export.codebase="${class.server.url}/mahalo-dl.jar ${jsk.dl.jar}"
		
		#config.args=("-", "com.sun.jini.mahalo.initialMemberGroups=new String[]{\"${group}\"}")
		config.args=()
	}
	
	# Outrigger (JavaSpaces) 
	outrigger={
		class="jini.server.wrapper.OutriggerWrapper"
		
		impl.class="com.sun.jini.outrigger.TransientOutriggerImpl"
		
		policy="${all.policy.path}"
		
		groups=("JINI_ROOT")
		import.codebase="${app.root}/jars/jini/lib/outrigger.jar"
		
		# Space separated export classpath
		export.codebase="${class.server.url}/outrigger-dl.jar ${jsk.dl.jar}"
		
		#config.args=("-", "com.sun.jini.mahalo.initialMemberGroups=new String[]{\"${group}\"}")
		config.args=()
	}
}

