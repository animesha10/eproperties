<project name="eproperties" default="all" basedir=".">
   
   <!-- The equivalent of 'make all' -->
   <target name="all" depends="init,assemble,test" />

   <!-- Full build, deletes everything, and builds everything. -->
   <target name="full" depends="init,clean" />

   <property file="version.properties"/>

   <!-- Initialize all build variables. -->
   <target name="init">
      <tstamp/>

      <!-- useful to dump properties -->
      <!-- echoproperties/ -->
    </target>
    
    <path id="project.class.path">
      <fileset dir="jars"> 
          <include name="**/*.jar"/>
      </fileset>
    </path>
    
    <path id="javacc.class.path">
      <fileset dir="javacc/4.2/"> 
          <include name="javacc.jar"/>
      </fileset>
    </path>
    
    <target name="clean">
        <delete dir="build"/>
        <delete dir="dist-tmp"/>
        <delete dir="dist"/>
    </target>
    
    <target name="javacc">
       <property name="javacc.output" value="build/gen/net/jmatrix/eproperties/parser/"/>
       <mkdir dir="${javacc.output}"/>
       <!-- This kinda sucks - don't want to ask others to have to 
            install javacc to build, don't want to check in generated
            code.  Solution is below.
       <javacc target="src/net/jmatrix/eproperties/parser/EPropertiesParser.jj"
               outputdirectory="${javacc.output}"
               javacchome="/home/bemo/java/javacc-4.2/"
       />
       -->
        
        <!-- This works from the command line.
        java -cp ~/java/javacc-4.2/bin/lib/javacc.jar javacc 
        -OUTPUT_DIRECTORY=gen/net/jmatrix/eproperties/parser/ 
        src/net/jmatrix/eproperties/parser/EPropertiesParser.jj
        -->
       <java classname="javacc">
           <classpath refid="javacc.class.path"/>
           <arg value="-OUTPUT_DIRECTORY=${javacc.output}"/>
           <arg value="src/net/jmatrix/eproperties/parser/EPropertiesParser.jj"/>
       </java>
    </target>
    
    <!-- Compile -->
    <target name="compile" depends="javacc"> 
        <mkdir dir="build/classes" />

        <javac destdir="build/classes" 
            excludes="**/*.old" debug="true" target="1.5"> 
           <classpath refid="project.class.path"/>
           <src>
               <pathelement location="src" />
               <pathelement location="build/gen" />
           </src>
        </javac>

        <copy todir="build/classes">
           <fileset dir="src" includes="**/*.properties,**/*.png" />
        </copy>
    </target>
    
    <!-- Compile JUnit tests-->
    <target name="compile-tests" depends="compile"> 
        <mkdir dir="build/test-classes" />

        <javac destdir="build/test-classes" 
            excludes="**/*.old" debug="true" target="1.5"> 
           <classpath refid="project.class.path"/>
           <classpath path="build/classes"/>
           <!-- classpath>
               <classpathelement refid="project.class.path"/>
           </classpath -->
           <src>
               <pathelement location="test" />
           </src>
        </javac>

        <copy todir="build/test-classes">
           <fileset dir="test" includes="**/*.properties,**/*.png" />
        </copy>
        
        <jar destfile="build/${name}-tests-${version}.jar">
            <fileset dir="build/test-classes" includes="**/**"/>
        </jar>
    </target>
    
    <!-- Assemble creates the deployable artifacts, like jars, wars, zips -->
    <target name="assemble" depends="compile,javadoc">
        <copy todir="build/config">
           <fileset dir="config" includes="**"/>
        </copy>
        <copy todir="build/jars">
           <fileset dir="jars" includes="**"/>
        </copy>
        
        <!-- docs -->
        <copy todir="build/docs">
            <fileset dir="docs" includes="manual/**"/>
        </copy>
        <echo message="Setting version to ${version}"/>
        <replace dir="build/docs/manual" token="$${version}" value="${version}"/>
        <echo message="copying release.txt"/>
        <copy todir="build/docs/manual" file="release.txt" failonerror="true"/>
        
        
        <copy todir="build/bin">
           <fileset dir="bin" includes="**"/>
        </copy>
        <chmod perm="a+x">
           <fileset dir="build/bin" includes="**"/>
        </chmod>
        
        <copy todir="build" file="release.txt"/>
        <copy todir="build" file="version.properties"/>
        
        
        <jar destfile="build/${name}-${version}.jar">
            <fileset dir="build/classes" includes="**/**"/>
            <manifest>
              <!-- Who is building this jar? -->
              <attribute name="Built-By" value="${user.name}"/>
              <!-- Information about the program itself -->
              <attribute name="Version" value="${version}"/>
              <attribute name="SVN-Revision" value="xx"/>
              <attribute name="Main-Class" value="net.jmatrix.eproperties.cli.EPropertiesCLI"/>
            </manifest>
        </jar>
        
        <!-- Make a version with commons-logging bundled in, and a proper
             manifest. -->
        <mkdir dir="build/dep-classes"/>
        <unjar src="jars/commons-logging.jar" dest="build/dep-classes"/>
        <jar destfile="build/${name}_deps-${version}.jar">
            <fileset dir="build/dep-classes" includes="**/**" excludes="META-INF/**"/>
            <fileset dir="build/classes" includes="**/**"/>
            <manifest>
              <!-- Who is building this jar? -->
              <attribute name="Built-By" value="${user.name}"/>
              <!-- Information about the program itself -->
              <attribute name="Version" value="${version}"/>
              <attribute name="SVN-Revision" value="xx"/>
              <attribute name="Main-Class" value="net.jmatrix.eproperties.cli.EPropertiesCLI"/>
            </manifest>
        </jar>
    </target>
    
    <target name="test" depends="compile-tests">
        <mkdir dir="build/junit.report"/>
        
        <junit showoutput="yes" printsummary="yes">
            <classpath>
               <!-- fileset dir="ivy-lib/build">
                  <include name="*.jar"/>
                </fileset -->
                <!-- need runtime stuff for oracle driver -->
                <fileset dir="build/jars">
                  <include name="*.jar"/>
                </fileset>

                <pathelement location="build/${name}-${version}.jar"/>
                <pathelement location="build/${name}-tests-${version}.jar"/>
            </classpath>

            
            <formatter type="plain"/>
            
            <batchtest todir="build/junit.report">
              <fileset dir="test">
                <include name="**/*Test.java"/>
              </fileset>
            </batchtest>
        </junit>
    </target>
    
    <!-- Creates distributable artifacts. -->
    <target name="dist" depends="assemble">
        <property name="build-id" value="${name}-${version}"/>
        <property name="dist-tmp" value="dist-tmp/${build-id}"/>
        <mkdir dir="${dist-tmp}"/>
        
        <!-- copy files to dist-tmp -->
        <copy todir="dist-tmp/${build-id}/">
           <fileset dir="build" includes="**/**" excludes="classes/**"/>
        </copy>
        
        <mkdir dir="dist"/>
        <!-- Create tar.gz -->
        <tar destfile="dist/${build-id}.tar.gz" longfile="gnu" compression="gzip">
            <tarfileset dir="dist-tmp/" filemode="755"
                includes="${build-id}/bin/**" excludes="${build-id}/bin/**/*.bat"/>

            <tarfileset dir="dist-tmp/"
                includes="${build-id}/**" excludes="${build-id}/bin/**"/>
        </tar>
        <!-- Create .xip -->
        <zip destfile="dist/${build-id}.zip">
            <fileset dir="dist-tmp" includes="${build-id}/**"/>
        </zip>
        <!-- copy the jar, with dependencies, to the dist dir -->
        <copy file="build/${name}_deps-${version}.jar" todir="dist"/>
    </target>
    
    <!--  Builds javadoc. -->
    <target name="javadoc" depends="init">
       <mkdir dir="build/docs/javadoc"/>
        <!-- This is the page title, in head->title -->
       <property name="TITLE" value="EProperties ${version}  generated ${TODAY}" />
        <!-- this is the title on the page, with h1 or somethign -->
       <property name="DOCTITLE" value="EProperties ${version} &lt;br/&gt; Generated ${TODAY}" />

       <javadoc destdir="build/docs/javadoc" 
                maxmemory="128m" private="true" 
                author="true" windowtitle="${TITLE}" doctitle="${DOCTITLE}"
                additionalparam="-linksource">
           <fileset dir="." includes="src/**/*.java,build/gen/**/*.java" excludes="**/*.properties,**/*.jj"/>
           <classpath refid="project.class.path"/>
           
           <!-- link to the sun javadoc -->
           <link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
       </javadoc>
    </target>
</project>
