
This syntax does not work!!
forums=
{
   name="Forums"
   description="Index of Forum posts."
   index="kb.forum"
}

---------------
This syntax does not work: 

property=

Which should define the property as either null or the empty string, but currently
just fails horribly.

Also support:
property="" 
which is explicitly the empty string, and not null.

---------------
DTD style framework for declaring what properties a system or 
subsystem REQUIRES to function.

For instance, if a JDBC driver requires user, password and URL properties, then
it could declare a little mini-properties DTD.  The properties could be 
validated inbound based on this 'DTD'.  then we can validate and throw
an InsufficientPropertiesException, which should contain all missing properties
or invalid values.  

Ala XML Schema, define properties DTD in terms of properties.

PTD={
   user={
      type="String"
      required=true
      message="Driver requires user property."
   }
   password={
      type="String"
      required=true
   }
   url={
      type="String"
      required=true
   }
   
   port={
      type=Integer
      required=false
      range.low=1
      range.high=1024
   }
   
   hosts={
      type="List"
      required=false
   }
   
   extended={
      type="EProperties"
      required=false
      
   }
}
----------------


Highlight syntax diffs for escaping special characters in the documentation.
Specifically, things like \f, \n, \t, \r are parsed differntly by 
java.util.Properties and EProperties.

Wrap parse errors, and try to make them more readable
  - Column, line AND file.  Filenames/url not currently included in exception
    making syntax errors in included properties a problem.


Support classpath URLs
 classpath://net/jmatrix/test/foo.properties
   - System classloader or local classloader
   - If a [include] is relative, then it goes to the parent URL.
     if the parent URL is file/http based, then it shoudl load with that
     if the parnte URL is classpath:// based, then it should attempt relative to that.
   - new method on EProperties to help bootstrap classpath based loading:
     EProperites.loadFromClasspath(String x) 
       - relative vs. absolute.  
         - if we allow relative, it should be relative to the calling class
         - else absolute.
         
Support jdbc urls

  jdbc://user@pass:jdbc:mysql://localhost:3306/property_server|table=properties|keycol=key|valcol=value

  tableprops={
     driver=
     url=
     user=
     pass=
     props.table=
     props.key=
     props.val=
  }
  
  props=[${tableprops}]

  - Where does it get the JDBC driver???

9 March 2010
  - Cannot leave a key= blank, and cannot define an empty hashmap with key={}
    - key= should define a property with a value of empty string
    - key={} should defind a property with a value of an empty nested EProperties object.
    
  For Henrik: 
    - Bundle source in dist task.  Bundle src as a .zip in the .tar.gz and .zip
    - investigate adding key:value syntax in parser
    - Pluggable inclusion processors - currently no way to register.  Perhaps
      register new processor as System property?  Or set globally on the 
      EProperties class - and make the includer load additional processors 
      from the static variable.
  For Randall:
    - Allow comments in elements of a list.  For instance:
list=("one",
      #"two",
      "three")
    - Pointers in comments do not parse.  the following will not parse:
# ->
key=value
    


9 Oct 2009
- The use of the 'CacheManager' is a bit confusing.  this was included
  to further support http based properties, and guard against failure.
  What it does - its design goal - is to create a cache of the stream
  represented by and http based URL and save it as a local file.  Later, 
  if that http stream is not available, the CacheManager will use the
  most recent successful copy of the properties.  This is to support potential
  network issues due to the remote nature of the properties file.
   - This could be confusing to people reading the code. 
   - Should be able to locally disable that feature on an include url:
     [http://jmatrix.net/test.properties|cache=false]
   - Shoudl be able to globally disable the caching feature.
   - should heavily document code using the Cache manager.

- Update javadoc whereever possible.


1) Substitution to support Objects as well as strings.  

Syntax Example: 
env={
   dev={
      host=bs00dev.dal0
   }
   test={
      host=bs00test.dal0
   }
}

envprops=${env->dev}

Here, the ${env->dev} resolves to a properties object, not to a String.  
That is the point, that syntax is intuitive, and should be allowed.


2) Vectors based on inclusion

Syntax Example: 

sql=([filea.sql], [fileb.sql])

Again, syntax is intuitive.

3) Better support for remote properties
   - Add support for JDBC based includes.
   - Support configurable timeouts for remote properteis.
   DONE: - Support local caching and fallback on remote timeout.
  
  